generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String      @id @db.VarChar(100) @default(cuid())
  firstName  String      @db.VarChar(100) @map("first_name")
  lastName   String?     @db.VarChar(100) @map("last_name")
  email      String      @db.VarChar(100) @unique
  phone      String      @db.VarChar(15) @unique
  status     STATUS      @default(PENDING)
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")

  account    Account?
  @@map("users")
}

model Account {
  id          String      @db.VarChar(100) @id @default(cuid())
  email       String      @db.VarChar(100) @unique
  userId      String      @db.VarChar(100) @unique @map("user_id")
  password    String?     @db.VarChar(100)
  ip          String      @db.Text
  userAgent   String      @db.Text @map("user_agent")
  googleId    String?     @db.Text @map("google_id")
  status      STATUS      @default(PENDING)
  roleId      Int         @db.Integer @map("role_id")
  createdAt   DateTime    @db.Timestamp() @map("created_at")
  updatedAt   DateTime    @db.Timestamp() @map("updated_at")

  user        User        @relation(fields: [userId], references: [id])
  role        Role        @relation(fields: [roleId], references: [id])
  emailVerify EmailVerify[]
  accountRefreshToken AccountRefreshToken?

  @@map("accounts")
}

model EmailVerify {
  id         Int         @db.Integer @id @default(autoincrement())
  accountId  String      @db.VarChar(100) @map("account_id")
  token      String      @db.VarChar(6) @unique
  type       TYPEEMAILVERIFY @default(REGISTER)
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")
  expiredAt  DateTime    @db.Timestamp() @map("expired_at")

  accounts   Account     @relation(fields: [accountId], references: [id])
  
  @@map("email_verify")
}

model AccountRefreshToken {
  email      String      @db.VarChar(100) @unique
  token      String      @db.Text
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")
  expiredAt  DateTime    @db.Timestamp() @map("expired_at")

  accountId  String      @db.VarChar(100) @map("account_id") @unique
  account    Account     @relation(fields: [accountId], references: [id])
  
  @@map("account_refresh_token")
}

model Role {
  id          Int         @db.Integer @default(autoincrement()) @id
  name        String      @db.VarChar(100) @unique @default("MEMBER")
  description String?     @db.Text
  status      STATUS      @default(PENDING)
  createdAt   DateTime    @db.Timestamp() @map("created_at")
  updatedAt   DateTime    @db.Timestamp() @map("updated_at")

  accounts    Account[]
  
  @@map("roles")
}

model Cruise {
  id         String      @db.VarChar(50) @default(cuid()) @id
  slug       String      @db.VarChar(100) @unique

  title      String      @db.VarChar(100) @unique
  subTitle   String?     @db.VarChar(100) @map("sub_title")
  description String?    @db.Text
  departure  String?     @db.VarChar(100)
  duration   String      @db.VarChar(100)

  status     STATUS      @default(ACTIVED)

  // Introduction disimpan langsung di model Cruise
  introductionTitle   String?             @db.VarChar(100) @map("introduction_title")
  introductionText    String?             @db.Text         @map("introduction_text")
  
  cta                 String?             @db.Text

  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")

  destinations Destination[]
  highlights Highlight[]
  include Include[]
  informations Information[]
  boats Boat[]
  
  @@map("river_cruise")
  @@index([updatedAt])
}

model Image { 
  id         Int         @db.Integer @id @default(autoincrement())
  imageType  IMAGETYPE   @map("image_type")
  alt        String?     @db.VarChar(100)

  filename   String      @db.VarChar(255)
  source     String     @db.Text
  mimetype   String      @db.VarChar(100)
  size       Int         @db.Integer

  entityId   String      @db.VarChar(50) @map("entity_id")
  entityType String      @db.VarChar(50) @map("entity_type")
  
  @@map("images")
  @@index([entityId, entityType, source, filename])
}

model Highlight {
  id          Int       @id @default(autoincrement()) @db.Integer
  title       String   @db.VarChar(100)
  description String?   @db.Text
  
  cruiseId    String    @db.VarChar(50) @map("cruise_id")
  cruise      Cruise    @relation(fields: [cruiseId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")
  
  @@map("highlights")
  @@index([cruiseId])
}
model Include {
  id          Int       @id @default(autoincrement()) @db.Integer
  title       String   @db.VarChar(100)
  description String?   @db.Text
  
  cruiseId    String    @db.VarChar(50) @map("cruise_id")
  cruise      Cruise    @relation(fields: [cruiseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now()) @db.Timestamp() @map("created_at")
  
  @@map("include")
  @@index([cruiseId])
}
model Information {
  id          Int       @id @default(autoincrement()) @db.Integer
  title       String   @db.VarChar(100)
  text        String?   @db.Text
  
  cruiseId    String    @db.VarChar(50) @map("cruise_id")
  cruise      Cruise    @relation(fields: [cruiseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now()) @db.Timestamp() @map("created_at")
  
  @@map("informations")
  @@index([cruiseId])
}


model Destination {
  id         Int         @id @db.Integer @default(autoincrement())
  cruiseId   String      @db.VarChar(50) @map("cruise_id")
  title      String      @db.VarChar(100)
  description String?    @db.Text
  days       String      @db.VarChar(100)

  status     STATUS      @default(ACTIVED)
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")

  cruise     Cruise      @relation(fields: [cruiseId], references: [id])
  
  @@map("destinations")
  @@index([cruiseId])
}


model Boat {
  id String @db.VarChar(100) @id @default(cuid())
  name String @db.VarChar(100) @unique
  slug String @db.VarChar(100) @unique
  description String? @db.Text
  optionText String? @db.Text @map("option_text")
  cruiseId String @db.VarChar(100) @map("cruise_id")
  
  status STATUS @default(PENDING)
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  updatedAt  DateTime    @db.Timestamp() @map("updated_at")
  cruise Cruise @relation(fields: [cruiseId], references: [id])
  abouts About[]
  experiences Experience[]
  facilities Facility[]
  cabins Cabin[]
  deck Deck?

  @@map("boats")
}

model Cabin {
  id Int @db.Integer @default(autoincrement()) @id
  name String @db.VarChar(100) 
  type TYPECABIN
  maxCapacity Int @db.Integer @map("max_capacity")
  description String? @db.Text
  price Decimal @db.Decimal(12,0)
  boatId String @db.VarChar(100) @map("boat_id")
  boat Boat @relation(fields: [boatId], references: [id])
  @@map("cabins")
}

model About {
  id Int @id @db.Integer @default(autoincrement())
  title String @db.VarChar(100)
  description String? @db.Text
  boatId String @db.VarChar(100) @map("boat_id")
  boat Boat @relation(fields: [boatId], references: [id])
  @@map("abouts")
}

model Experience {
  id Int @id @db.Integer @default(autoincrement())
  title String @db.VarChar(100)
  description String? @db.Text
  boatId String @db.VarChar(100) @map("boat_id")
  boat Boat @relation(fields: [boatId], references: [id])
  @@map("experiences")
}

model Facility {
  id Int @db.Integer @id @default(autoincrement())
  name String @db.VarChar(100) 
  description String? @db.VarChar(100)
  icon String? @db.VarChar(100)
  boatId String @db.VarChar(100) @map("boat_id")
  boat Boat @relation(fields: [boatId], references: [id])
  @@map("facilities")
}

model Deck{
  id Int @db.Integer @id @default(autoincrement())
  title String @db.VarChar(100)
  description String? @db.VarChar(100)
  boatId String @db.VarChar(100) @unique
  boat Boat @relation(fields: [boatId], references: [id])
  @@map("decks")
}

model Log {
  id         Int         @db.Integer @id @default(autoincrement())
  accountId  String      @db.VarChar(100) @map("account_id")
  action     String      @db.VarChar(100)
  table      String      @db.VarChar(100)
  status     STATUSLOG
  createdAt  DateTime    @db.Timestamp() @map("created_at")
  
  @@map("logs")
  @@index([accountId])
}

enum STATUS {
  FAVOURITED
  ACTIVED
  PENDING
  BLOCKED
  DELETED
}

enum STATUSLOG {
  SUCCESS
  FAILED
}

enum TYPEEMAILVERIFY {
  REGISTER
  FORGOT_PASSWORD
  CHANGE_EMAIL
}

enum IMAGETYPE {
  COVER
  PHOTO
}

enum TYPECABIN {
  TWIN
  DOUBLE
  SUPER
}