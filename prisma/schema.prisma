// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @db.VarChar(100) @default(cuid())
  firstName String @db.VarChar(100) @map("first_name")
  lastName String? @db.VarChar(100) @map("last_name")
  email String @db.VarChar(100) @unique
  phone String @db.VarChar(15) @unique
  status STATUS @default(PENDING)
  createdAt DateTime @db.Timestamp() @map("created_at")
  updatedAt DateTime @db.Timestamp() @map("updated_at")

  account Account?
  @@map("users")
}

model Account {
  id String @db.VarChar(100) @id @default(cuid())
  email String @db.VarChar(100) @unique
  userId String @db.VarChar(100) @unique @map("user_id")
  password String? @db.VarChar(100)
  ip String @db.Text
  userAgent String @db.Text @map("user_agent")
  googleId String? @db.Text @map("google_id")
  status STATUS @default(PENDING)
  roleId Int @db.Int @map("role_id")
  createdAt DateTime @db.Timestamp() @map("created_at")
  updatedAt DateTime @db.Timestamp() @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  emailVerify EmailVerify[]
  accountRefreshToken AccountRefreshToken?
  @@map("accounts")
}

model EmailVerify{
  id Int @db.Int @id @default(autoincrement())
  accountId String @db.VarChar(100) @map("account_id")
  token String @db.VarChar(6) @unique
  type TYPEEMAILVERIFY @default(REGISTER)
  createdAt DateTime @db.Timestamp() @map("created_at")
  updatedAt DateTime @db.Timestamp() @map("updated_at")
  expiredAt DateTime @db.Timestamp() @map("expired_at")

  accounts Account @relation(fields: [accountId], references: [id])
  @@map("email_verify")
}

model AccountRefreshToken {
  email String @db.VarChar(100) @unique
  token String @db.Text
  createdAt DateTime @db.Timestamp() @map("created_at")
  updatedAt DateTime @db.Timestamp() @map("updated_at")
  expiredAt DateTime @db.Timestamp() @map("expired_at")

  accountId String @db.VarChar(100) @map("account_id") @unique
  account Account @relation(fields: [accountId], references: [id])
  @@map("account_refresh_token")
}

model Role {
  id Int @db.Int @default(autoincrement()) @id
  name String @db.VarChar(100) @unique @default("MEMBER")
  description String? @db.Text
  status STATUS @default(PENDING)
  createdAt DateTime @db.Timestamp() @map("created_at")
  updatedAt DateTime @db.Timestamp() @map("updated_at")

  accounts Account[]
  @@map("roles")
}



enum STATUS {
  FAVOURITED
  ACTIVED
  PENDING
  BLOCKED
  DELETED
}

enum TYPEEMAILVERIFY {
  REGISTER
  FORGOT_PASSWORD
  CHANGE_EMAIL
}